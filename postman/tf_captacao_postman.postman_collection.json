{
	"info": {
		"_postman_id": "9322d752-6b24-4e97-af3d-f6daf54fc57f",
		"name": "tf_captacao_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37495315"
	},
	"item": [
		{
			"name": "Autenticacao",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Login Admin Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.text();\r",
											"let token = responseData.trim();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token_user_admin\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin.teste\",\r\n  \"password\": \"Jvs9^@B809lP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Gestor Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.text();\r",
											"let token = responseData.trim();\r",
											"\r",
											"pm.environment.set(\"token_user_gestor\", token);\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"gestor.teste\",\r\n  \"password\": \"Jvs9^@B809lP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Instrutor Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.text();\r",
											"let token = responseData.trim();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.environment.set(\"token_user_instrutor\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"instrutor.teste\",\r\n  \"password\": \"Jvs9^@B809lP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Aluno Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.text();\r",
											"let token = responseData.trim();\r",
											"\r",
											"pm.environment.set(\"token_user_aluno\", token);\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"aluno.teste\",\r\n  \"password\": \"Jvs9^@B809lP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Colaborador Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.text();\r",
											"let token = responseData.trim();\r",
											"\r",
											"pm.environment.set(\"token_user_colaborador\", token);\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"colaborador.teste\",\r\n  \"password\": \"Jvs9^@B809lP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Gestão de Pessoas Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.text();\r",
											"let token = responseData.trim();\r",
											"\r",
											"pm.environment.set(\"token_user_gp\", token);\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"gp.teste\",\r\n  \"password\": \"Jvs9^@B809lP\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Sem Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"WFTrIZOcFEeKaAG\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Username Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": null,\r\n    \"password\": \"WFTrIZOcFEeKaAG\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Senha Em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"tepic59921@ippals.com\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Senha Nula",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"tepic59921@ippals.com\",\r\n    \"password\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/usuario/login",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"usuario",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /auth/atualizar-senha-autenticado",
					"item": [
						{
							"name": "atualizarSenhaUsuario2AutenticadoComoUsuario2",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"senhaAtual\": \"WFTrIZOcFEeKaAG\",\r\n  \"senhaNova\": \"senhaNova\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_user}}/auth/atualizar-senha-autenticado",
									"host": [
										"{{base_url_user}}"
									],
									"path": [
										"auth",
										"atualizar-senha-autenticado"
									]
								}
							},
							"response": []
						},
						{
							"name": "atualizarSenhaUsuario2AutenticadoComUsuario1",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"senhaAtual\": \"WFTrIZOcFEeKaAG\",\r\n  \"senhaNova\": \"senhaNova\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/atualizar-senha-autenticado",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"atualizar-senha-autenticado"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /auth/redefinir-senha",
					"item": [
						{
							"name": "atualizarSenhaUsuario2ComTokenUsuario2",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{token_user2}}\",\r\n  \"senha\": \"WFTrIZOcFEeKaAG\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/redefinir-senha",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"redefinir-senha"
									]
								}
							},
							"response": []
						},
						{
							"name": "atualizarSenhaUsuario2ComTokenUsuario2AutenticadoComoUsuario1",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user1}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{token_user2}}\",\r\n  \"senha\": \"senhaNova\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/redefinir-senha",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"redefinir-senha"
									]
								}
							},
							"response": []
						},
						{
							"name": "atualizarSenhaUsuario2ComTokenEmBranco",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"\",\r\n  \"senha\": \"senhaNova\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/redefinir-senha",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"redefinir-senha"
									]
								}
							},
							"response": []
						},
						{
							"name": "atualizarSenhaUsuario2ComTokenNulo",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": null,\r\n  \"senha\": \"senhaNova\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/redefinir-senha",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"redefinir-senha"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /auth/recuperar-senha",
					"item": [
						{
							"name": "enviarEmailRecuperacaoDeSenhaComEmailCadastrado",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"url\": \"www.dbc.com/\",\r\n  \"email\": \"email@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/recuperar-senha",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"recuperar-senha"
									]
								}
							},
							"response": []
						},
						{
							"name": "enviarEmailRecuperacaoDeSenhaComEmailNaoCadastrado",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"url\": \"www.dbc.com/\",\r\n  \"email\": \"tepic59921@ippals.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://vemser-dbc.dbccompany.com.br:39000/vemser/captacao-back/auth/recuperar-senha",
									"protocol": "http",
									"host": [
										"vemser-dbc",
										"dbccompany",
										"com",
										"br"
									],
									"port": "39000",
									"path": [
										"vemser",
										"captacao-back",
										"auth",
										"recuperar-senha"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Questão",
			"item": [
				{
					"name": "POST /questao/criar-pratica",
					"item": [
						{
							"name": "Criar Questão Prática com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Verificar mensagem de cadastro com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Cadastro realizado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão de Matemática\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática tipo invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Campo tipo invalido\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql(\"Campo tipo com valor inválido.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão de Matemática\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"teste\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática sem Inputs e Outputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.message).to.eql(\"Deve haver pelo menos um input e output para questões práticas\");\r",
											"    pm.expect(respData._id).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão de Matemática\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"\",\r\n      \"saidaExplicacao\": \"\",\r\n      \"exemploEntrada\": \"\",\r\n      \"exemploSaida\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática com Título Excedendo Limite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"titulo: size must be between 0 and 100\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"titulo\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam hendrerit mauris non nisi faucibus, ac vestibulum leo tincidunt. Fusce et leo id purus convallis congue. Proin non ipsum sit amet nunc semper tempor. Nam tincidunt posuere bibendum. Mauris convallis convallis libero ut efficitur. Sed maximus magna sit amet vehicula. Quisque quis orci et metus pretium condimentum. Aliquam erat volutpat. Phasellus bibendum\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática com Título em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"titulo: must not be blank\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"titulo\": \"\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática com Enunciado em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"enunciado: must not be blank\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"titulo\": \"Questao\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática com Enunciado Excedendo Limite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"enunciado: size must be between 0 and 4000\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis quis tortor in eros dapibus aliquet. Integer nec quam vitae lectus congue convallis. Phasellus nec venenatis neque, eget ullamcorper ante. Nulla facilisi. Sed id tincidunt odio. In porttitor eros nec odio finibus, at dignissim nisi efficitur. Curabitur non urna sit amet tortor venenatis dictum. Nam vel ullamcorper lacus. Nullam ultrices convallis mi, eu dictum velit interdum vitae. Pellentesque lacinia nisl libero, sit amet vestibulum urna accumsan in. Integer ut magna vel eros eleifend vestibulum. Proin consectetur lectus id quam bibendum fermentum. Mauris posuere semper bibendum. Sed convallis urna quis congue ultricies. Nullam viverra dui nec est tempor, sit amet sodales leo bibendum. Nulla sollicitudin tellus in urna mattis auctor. Curabitur sed augue sed nisl bibendum viverra a id libero. Phasellus mollis elit non purus efficitur, sit amet blandit ligula consequat. Donec egestas orci justo, ut consequat velit dignissim nec. In hac habitasse platea dictumst. Nulla non libero condimentum, sodales lectus eget, egestas dui. Vivamus rhoncus metus et quam vehicula luctus. Ut ultrices tortor vel neque ultricies, eget dapibus eros viverra. Donec id ligula et metus fermentum ultricies. Maecenas condimentum, turpis sit amet finibus hendrerit, libero velit pharetra libero, nec bibendum nisi nisl at ex. Cras accumsan bibendum sapien, vel ultrices eros elementum eu. Fusce euismod varius volutpat. Vestibulum commodo ipsum nisi, vel bibendum ipsum luctus eu. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Donec id arcu sed est laoreet ultrices a ac neque. Maecenas vel neque odio. Nam quis massa eget nisi gravida finibus non quis odio. Aliquam gravida elit at sapien vestibulum bibendum. Pellentesque id mi sapien. Proin sodales, orci nec aliquet pellentesque, augue nibh scelerisque libero, a efficitur nulla nisi id justo. Ut vitae leo ex. In luctus lorem ut nisl fermentum, non vehicula urna viverra. Vestibulum sollicitudin eros ac eros tristique tincidunt. Phasellus eget metus vel nunc condimentum viverra. Morbi tempor, orci non sodales fermentum, purus nulla fermentum libero, nec consequat turpis nulla quis est. Phasellus at ullamcorper tortor. Ut auctor consequat nisi, ac ullamcorper lorem euismod vel. Aliquam vestibulum suscipit nunc, nec malesuada lorem laoreet nec. Nulla facilisi. Integer ut sapien velit. Integer eleifend eget neque eget vestibulum. Nulla at odio ullamcorper, eleifend mi nec, volutpat mauris. Integer commodo turpis sit amet lacus eleifend, nec fermentum lorem viverra. Pellentesque blandit hendrerit purus, at vehicula ex consequat quis. Vivamus in diam in ex interdum tincidunt. Morbi vitae nunc nec purus maximus viverra id eget nisl. Integer euismod purus ac ante vestibulum convallis. Nulla non nisi nec lectus euismod pharetra nec sit amet nulla. Donec suscipit, orci non rhoncus aliquet, tortor erat interdum eros, in efficitur mi libero ut velit. Donec vestibulum urna vel est malesuada, eu accumsan mauris vulputate. Nam non eleifend mauris. Mauris vel mauris in lorem posuere tincidunt a vel elit. Nam ut libero auctor, mollis eros sed, finibus orci. Nullam malesuada, sapien sed molestie fermentum, lacus nulla feugiat ante, ac ultrices risus dui sit amet magna. Proin rhoncus varius viverra. Integer in justo eget eros lacinia consequat in ac sapien. Duis malesuada, orci ac facilisis elementum, lacus elit ullamcorper magna, ac consequat mi dolor at magna. Morbi scelerisque erat id purus varius, sed vestibulum ipsum interdum. Aliquam nec lorem in ex varius elementum. Suspendisse consequat efficitur velit, eu tristique enim lacinia quis. Maecenas rhoncus nisi nec felis eleifend, vel faucibus arcu fermentum. Donec in risus ut quam tempus volutpat non a turpis. Morbi sit amet tincidunt tortor. Vivamus gravida justo non mi malesuada dapibus. Ut vitae justo tellus. Nulla facilisi. Fusce finibus, purus eget facilisis tempus, nulla eros fermentum quam, ut sodales purus ante vel est. Donec euismod elementum orci, ac fermentum neque vestibulum non. Vivamus blandit, sem in pellentesque ultrices, lectus lectus fermentum ipsum, vel euismod neque orci nec sem. Proin a magna sit amet neque sodales auctor. Mauris eget nulla in nulla laoreet tincidunt. Nam non orci ut libero egestas faucibus. Sed vestibulum justo nec urna vestibulum laoreet. Maecenas commodo consequat lacus, nec sollicitudin purus lacinia quis. Nullam at tellus lacinia, convallis nisi ac, suscipit ligula. Morbi quis erat eget tellus facilisis faucibus. Duis auctor tempus leo. Ut convallis ligula libero, non sodales mi efficitur in. Duis nec sollicitudin eros. Nulla non lobortis tortor, vel placerat velit. Nulla nec orci sed dolor dapibus auctor. Vivamus sollicitudin lorem arcu, in dictum velit viverra nec. Nam eget odio in lectus tristique eleifend ut ut tortor. Sed at eros lacus. Nulla facilisi. Morbi convallis metus ut augue volutpat, et lacinia mi laoreet. Integer ullamcorper, nunc eget malesuada pharetra, sapien est malesuada risus, eget efficitur sem metus ut nunc. Pellentesque eget urna a lorem dictum dictum ac nec sem. Curabitur sed tristique odio, quis viverra arcu. Phasellus non quam non lorem facilisis suscipit. Vivamus vestibulum dui nec felis luctus, sit amet scelerisque neque placerat. Nam et turpis et mi bibendum tincidunt. Maecenas suscipit ultricies metus. Proin sed odio eros. Maecenas varius felis nec nisi lobortis, eget bibendum risus facilisis. Suspendisse fermentum fermentum risus, non vestibulum purus tempor nec. Integer nec justo vel lacus laoreet ullamcorper. In ultricies dui ut volutpat vestibulum. Mauris tincidunt fel\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática com nível de dificuldade nulo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"dificuldade: must not be null\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão de Matemática\",\r\n  \"dificuldade\": null,\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Prática com nível de dificuldade inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões práticas\", function () {\r",
											"    pm.expect(respData.errors).to.eql(\"Campo dificuldade com valor inválido.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão de Matemática\",\r\n  \"dificuldade\": \"\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-pratica",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-pratica"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST /questao/criar-objetiva",
					"item": [
						{
							"name": "Criar Questão Objetiva Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test(\"Verificar mensagem de cadastro com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Cadastro realizado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva com Título Excedendo Limite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"titulo: size must be between 1 and 100\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 17,\r\n  \"titulo\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam hendrerit mauris non nisi faucibus, ac vestibulum leo tincidunt. Fusce et leo id purus convallis congue. Proin non ipsum sit amet nunc semper tempor. Nam tincidunt posuere bibendum. Mauris convallis convallis libero ut efficitur. Sed maximus magna sit amet vehicula. Quisque quis orci et metus pretium condimentum. Aliquam erat volutpat. Phasellus bibendum\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva com Título em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"titulo: must not be blank\", \"titulo: size must be between 1 and 100\"]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 17,\r\n  \"titulo\": \"\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva com Enunciado em Branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"enunciado: must not be blank\",\r",
											"        \"enunciado: size must be between 1 and 4000\"]);\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva com Enunciado Excedendo Limite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"enunciado: size must be between 1 and 4000\"]);\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis quis tortor in eros dapibus aliquet. Integer nec quam vitae lectus congue convallis. Phasellus nec venenatis neque, eget ullamcorper ante. Nulla facilisi. Sed id tincidunt odio. In porttitor eros nec odio finibus, at dignissim nisi efficitur. Curabitur non urna sit amet tortor venenatis dictum. Nam vel ullamcorper lacus. Nullam ultrices convallis mi, eu dictum velit interdum vitae. Pellentesque lacinia nisl libero, sit amet vestibulum urna accumsan in. Integer ut magna vel eros eleifend vestibulum. Proin consectetur lectus id quam bibendum fermentum. Mauris posuere semper bibendum. Sed convallis urna quis congue ultricies. Nullam viverra dui nec est tempor, sit amet sodales leo bibendum. Nulla sollicitudin tellus in urna mattis auctor. Curabitur sed augue sed nisl bibendum viverra a id libero. Phasellus mollis elit non purus efficitur, sit amet blandit ligula consequat. Donec egestas orci justo, ut consequat velit dignissim nec. In hac habitasse platea dictumst. Nulla non libero condimentum, sodales lectus eget, egestas dui. Vivamus rhoncus metus et quam vehicula luctus. Ut ultrices tortor vel neque ultricies, eget dapibus eros viverra. Donec id ligula et metus fermentum ultricies. Maecenas condimentum, turpis sit amet finibus hendrerit, libero velit pharetra libero, nec bibendum nisi nisl at ex. Cras accumsan bibendum sapien, vel ultrices eros elementum eu. Fusce euismod varius volutpat. Vestibulum commodo ipsum nisi, vel bibendum ipsum luctus eu. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Donec id arcu sed est laoreet ultrices a ac neque. Maecenas vel neque odio. Nam quis massa eget nisi gravida finibus non quis odio. Aliquam gravida elit at sapien vestibulum bibendum. Pellentesque id mi sapien. Proin sodales, orci nec aliquet pellentesque, augue nibh scelerisque libero, a efficitur nulla nisi id justo. Ut vitae leo ex. In luctus lorem ut nisl fermentum, non vehicula urna viverra. Vestibulum sollicitudin eros ac eros tristique tincidunt. Phasellus eget metus vel nunc condimentum viverra. Morbi tempor, orci non sodales fermentum, purus nulla fermentum libero, nec consequat turpis nulla quis est. Phasellus at ullamcorper tortor. Ut auctor consequat nisi, ac ullamcorper lorem euismod vel. Aliquam vestibulum suscipit nunc, nec malesuada lorem laoreet nec. Nulla facilisi. Integer ut sapien velit. Integer eleifend eget neque eget vestibulum. Nulla at odio ullamcorper, eleifend mi nec, volutpat mauris. Integer commodo turpis sit amet lacus eleifend, nec fermentum lorem viverra. Pellentesque blandit hendrerit purus, at vehicula ex consequat quis. Vivamus in diam in ex interdum tincidunt. Morbi vitae nunc nec purus maximus viverra id eget nisl. Integer euismod purus ac ante vestibulum convallis. Nulla non nisi nec lectus euismod pharetra nec sit amet nulla. Donec suscipit, orci non rhoncus aliquet, tortor erat interdum eros, in efficitur mi libero ut velit. Donec vestibulum urna vel est malesuada, eu accumsan mauris vulputate. Nam non eleifend mauris. Mauris vel mauris in lorem posuere tincidunt a vel elit. Nam ut libero auctor, mollis eros sed, finibus orci. Nullam malesuada, sapien sed molestie fermentum, lacus nulla feugiat ante, ac ultrices risus dui sit amet magna. Proin rhoncus varius viverra. Integer in justo eget eros lacinia consequat in ac sapien. Duis malesuada, orci ac facilisis elementum, lacus elit ullamcorper magna, ac consequat mi dolor at magna. Morbi scelerisque erat id purus varius, sed vestibulum ipsum interdum. Aliquam nec lorem in ex varius elementum. Suspendisse consequat efficitur velit, eu tristique enim lacinia quis. Maecenas rhoncus nisi nec felis eleifend, vel faucibus arcu fermentum. Donec in risus ut quam tempus volutpat non a turpis. Morbi sit amet tincidunt tortor. Vivamus gravida justo non mi malesuada dapibus. Ut vitae justo tellus. Nulla facilisi. Fusce finibus, purus eget facilisis tempus, nulla eros fermentum quam, ut sodales purus ante vel est. Donec euismod elementum orci, ac fermentum neque vestibulum non. Vivamus blandit, sem in pellentesque ultrices, lectus lectus fermentum ipsum, vel euismod neque orci nec sem. Proin a magna sit amet neque sodales auctor. Mauris eget nulla in nulla laoreet tincidunt. Nam non orci ut libero egestas faucibus. Sed vestibulum justo nec urna vestibulum laoreet. Maecenas commodo consequat lacus, nec sollicitudin purus lacinia quis. Nullam at tellus lacinia, convallis nisi ac, suscipit ligula. Morbi quis erat eget tellus facilisis faucibus. Duis auctor tempus leo. Ut convallis ligula libero, non sodales mi efficitur in. Duis nec sollicitudin eros. Nulla non lobortis tortor, vel placerat velit. Nulla nec orci sed dolor dapibus auctor. Vivamus sollicitudin lorem arcu, in dictum velit viverra nec. Nam eget odio in lectus tristique eleifend ut ut tortor. Sed at eros lacus. Nulla facilisi. Morbi convallis metus ut augue volutpat, et lacinia mi laoreet. Integer ullamcorper, nunc eget malesuada pharetra, sapien est malesuada risus, eget efficitur sem metus ut nunc. Pellentesque eget urna a lorem dictum dictum ac nec sem. Curabitur sed tristique odio, quis viverra arcu. Phasellus non quam non lorem facilisis suscipit. Vivamus vestibulum dui nec felis luctus, sit amet scelerisque neque placerat. Nam et turpis et mi bibendum tincidunt. Maecenas suscipit ultricies metus. Proin sed odio eros. Maecenas varius felis nec nisi lobortis, eget bibendum risus facilisis. Suspendisse fermentum fermentum risus, non vestibulum purus tempor nec. Integer nec justo vel lacus laoreet ullamcorper. In ultricies dui ut volutpat vestibulum. Mauris tincidunt fel\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva com Mais de 5 Alternativas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"alternativasObjetivas: size must be between 2 and 5\"]);\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva com 1 Alternativa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\"alternativasObjetivas: size must be between 2 and 5\"]);\r",
											"});\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva sem Alternativa Correta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar regra de negócio com sucesso\", function () {\r",
											"    pm.expect(respData.message).to.eql(\"Deve haver pelo menos uma alternativa correta e uma incorreta\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": null,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Questão Objetiva nível de dificuldade branco e inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar requisitos mínimos de questões objetivas\", function () {\r",
											"    pm.expect(respData.errors).to.eql([\r",
											"        \"dificuldade: must not be blank\",\r",
											"        \"dificuldade: Valor inválido para dificuldade\"\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar questao obejetiva sem permissão de acesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Candidato sem permissão\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"Questão Java\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"enunciado\": \"Qual é a utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"OBJETIVA\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/criar-objetiva",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"criar-objetiva"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Listar Questões",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões do tipo objetiva com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/por-tipo?tipo=OBJETIVA",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"por-tipo"
									],
									"query": [
										{
											"key": "tipo",
											"value": "OBJETIVA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões do tipo prática com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/por-tipo?tipo=PRATICA",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"por-tipo"
									],
									"query": [
										{
											"key": "tipo",
											"value": "PRATICA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões de dificuldade fácil com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/por-dificuldade?dificuldade=FACIL",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"por-dificuldade"
									],
									"query": [
										{
											"key": "dificuldade",
											"value": "FACIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões de dificuldade média com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/por-dificuldade?dificuldade=MEDIO",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"por-dificuldade"
									],
									"query": [
										{
											"key": "dificuldade",
											"value": "MEDIO"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões de dificuldade difícil com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/por-dificuldade?dificuldade=DIFICIL",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"por-dificuldade"
									],
									"query": [
										{
											"key": "dificuldade",
											"value": "DIFICIL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões por palavra chave com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/por-palavra-chave?keyword=PHP",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"por-palavra-chave"
									],
									"query": [
										{
											"key": "keyword",
											"value": "PHP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar questões aleatoriamente com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/listar-questoes-aleatorias?dificuldade=FACIL&numeroQuestoes=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"listar-questoes-aleatorias"
									],
									"query": [
										{
											"key": "dificuldade",
											"value": "FACIL"
										},
										{
											"key": "dificuldade",
											"value": "MEDIO",
											"disabled": true
										},
										{
											"key": "dificuldade",
											"value": "DIFICIL",
											"disabled": true
										},
										{
											"key": "numeroQuestoes",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /questao/editar-pratica/{idQuestao}",
					"item": [
						{
							"name": "Atualizar Questão prática Por ID Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Verificar mensagem de cadastro com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Editado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão de Matemática\",\r\n  \"dificuldade\": \"MEDIO\",\r\n  \"enunciado\": \"Calcule a área de um círculo dado o raio. Utilize o valor de π = 3.14.\",\r\n  \"tipo\": \"PRATICA\",\r\n  \"exemplos\": [\r\n    {\r\n      \"entradaExplicacao\": \"Raio = 5\",\r\n      \"saidaExplicacao\": \"Área = π * raio^2 = 3.14 * 5^2 = 78.5\",\r\n      \"exemploEntrada\": \"5\",\r\n      \"exemploSaida\": \"78.5\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/editar-pratica/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"editar-pratica",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Questão prática Por ID sem Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem ao não encontrar questão prática\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Questão não encontrada\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"A vida é fácil?\",\r\n  \"dificuldade\": \"DIFICIL\",\r\n  \"enunciado\": \"Você acha a vida fácil?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"PRATICA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/editar-pratica/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"editar-pratica",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /questao/editar-objetiva/{idQuestao}",
					"item": [
						{
							"name": "Atualizar Questão Objetiva Por ID Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Verificar mensagem de cadastro com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Editado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"titulo\": \"Questão Java\",\r\n  \"enunciado\": \"Qual é a função utilizada em Java para converter uma String em um número inteiro?\",\r\n  \"dificuldade\": \"FACIL\",\r\n  \"alternativasObjetivas\": [\r\n    {\r\n      \"idAlternativaObjetiva\": 1,\r\n      \"nome\": \"nome\",\r\n      \"correta\": true\r\n    },\r\n    {\r\n      \"idAlternativaObjetiva\": 1,\r\n      \"nome\": \"nome\",\r\n      \"correta\": false\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/editar-objetiva/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"editar-objetiva",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Questão Objetiva Por ID sem Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar mensagem ao não encontrar questão prática\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Questão não encontrada\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"respostaObjetiva\": 1,\r\n  \"titulo\": \"A vida é fácil?\",\r\n  \"dificuldade\": \"DIFICIL\",\r\n  \"enunciado\": \"Você acha a vida fácil?\",\r\n  \"ativo\": true,\r\n  \"tipo\": \"PRATICA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/questao/editar-objetiva/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										"editar-objetiva",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Desabilitar Questão por ID Com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar código de status 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Desabilitar Questão por ID sem Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"pm.test(\"Verificar mensagem ao não encontrar questão prática\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Questão não encontrada\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/questao/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"questao",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Prova",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Criar Prova com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica prova cadastrado com sucesso\", function () {\r",
											"    pm.expect(respData.id).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Verifica prova cadastrado com sucesso\", function () {\r",
											"    pm.expect(respData.mensagem).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 22,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova edição em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada com a edição em branco\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"idEdicao: must not be null\"    \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": null,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova sem data inicio e data final",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada sem data final e data inicio\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"dataFinal: must not be null\",\r",
											"        \"dataInicio: must not be null\"   \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"\",\r\n  \"dataFinal\": \"\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 123,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova sem data final",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada sem data final\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"dataFinal: must not be null\"   \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 123,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova sem data inicio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada sem data inicio\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"dataInicio: must not be null\"   \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 123,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova data inicio invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada data inicio invalida\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"dataInicio: O campo dataInicio deve conter uma data futura.\"   \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2023-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 123,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova data inicio e data final invalidas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada data inicio invalida\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"dataFinal: O campo dataFinal deve conter uma data futura.\",\r",
											"        \"dataInicio: O campo dataInicio deve conter uma data futura.\"   \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2023-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2023-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 123,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova data final invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova criada data inicio invalida\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"dataFinal: O campo dataFinal deve conter uma data futura.\"   \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2023-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 123,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova linguagem não encontrada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Linguagem não encontrada.\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\r",
											"        \"Linguagem não encontrada!\"    \r",
											"    );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 2,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 18,\r\n  \"idsLinguagens\": [123],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova com versão inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Versão inesxistente\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"versaoProva: must be less than or equal to 3\"    \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 800,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 29,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova versão em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Versão em branco\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"versaoProva: must not be null\"    \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": null,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 29,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova com edição inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Edição inesxistente\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\r",
											"        \"Edição não encontrada!\"    \r",
											"    );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 3,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 2989,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova com título excedendo limite de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Excedeu o máximo de até 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"versaoProva: must be less than or equal to 3\",\r",
											"        \"tituloProva: size must be between 1 and 100\"\r",
											"        \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 15,\r\n  \"tituloProva\": \"Prova Vem Ser15 - Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BCContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, It has roots in a piece of classical Latin literature from 45 BCContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC.\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 20,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova com enunciado excedendo limite de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Excedeu o máximo de até 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"enunciadoProva: size must be between 1 and 4000\"\r",
											"        \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 2,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis quis tortor in eros dapibus aliquet. Integer nec quam vitae lectus congue convallis. Phasellus nec venenatis neque, eget ullamcorper ante. Nulla facilisi. Sed id tincidunt odio. In porttitor eros nec odio finibus, at dignissim nisi efficitur. Curabitur non urna sit amet tortor venenatis dictum. Nam vel ullamcorper lacus. Nullam ultrices convallis mi, eu dictum velit interdum vitae. Pellentesque lacinia nisl libero, sit amet vestibulum urna accumsan in. Integer ut magna vel eros eleifend vestibulum. Proin consectetur lectus id quam bibendum fermentum. Mauris posuere semper bibendum. Sed convallis urna quis congue ultricies. Nullam viverra dui nec est tempor, sit amet sodales leo bibendum. Nulla sollicitudin tellus in urna mattis auctor. Curabitur sed augue sed nisl bibendum viverra a id libero. Phasellus mollis elit non purus efficitur, sit amet blandit ligula consequat. Donec egestas orci justo, ut consequat velit dignissim nec. In hac habitasse platea dictumst. Nulla non libero condimentum, sodales lectus eget, egestas dui. Vivamus rhoncus metus et quam vehicula luctus. Ut ultrices tortor vel neque ultricies, eget dapibus eros viverra. Donec id ligula et metus fermentum ultricies. Maecenas condimentum, turpis sit amet finibus hendrerit, libero velit pharetra libero, nec bibendum nisi nisl at ex. Cras accumsan bibendum sapien, vel ultrices eros elementum eu. Fusce euismod varius volutpat. Vestibulum commodo ipsum nisi, vel bibendum ipsum luctus eu. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Donec id arcu sed est laoreet ultrices a ac neque. Maecenas vel neque odio. Nam quis massa eget nisi gravida finibus non quis odio. Aliquam gravida elit at sapien vestibulum bibendum. Pellentesque id mi sapien. Proin sodales, orci nec aliquet pellentesque, augue nibh scelerisque libero, a efficitur nulla nisi id justo. Ut vitae leo ex. In luctus lorem ut nisl fermentum, non vehicula urna viverra. Vestibulum sollicitudin eros ac eros tristique tincidunt. Phasellus eget metus vel nunc condimentum viverra. Morbi tempor, orci non sodales fermentum, purus nulla fermentum libero, nec consequat turpis nulla quis est. Phasellus at ullamcorper tortor. Ut auctor consequat nisi, ac ullamcorper lorem euismod vel. Aliquam vestibulum suscipit nunc, nec malesuada lorem laoreet nec. Nulla facilisi. Integer ut sapien velit. Integer eleifend eget neque eget vestibulum. Nulla at odio ullamcorper, eleifend mi nec, volutpat mauris. Integer commodo turpis sit amet lacus eleifend, nec fermentum lorem viverra. Pellentesque blandit hendrerit purus, at vehicula ex consequat quis. Vivamus in diam in ex interdum tincidunt. Morbi vitae nunc nec purus maximus viverra id eget nisl. Integer euismod purus ac ante vestibulum convallis. Nulla non nisi nec lectus euismod pharetra nec sit amet nulla. Donec suscipit, orci non rhoncus aliquet, tortor erat interdum eros, in efficitur mi libero ut velit. Donec vestibulum urna vel est malesuada, eu accumsan mauris vulputate. Nam non eleifend mauris. Mauris vel mauris in lorem posuere tincidunt a vel elit. Nam ut libero auctor, mollis eros sed, finibus orci. Nullam malesuada, sapien sed molestie fermentum, lacus nulla feugiat ante, ac ultrices risus dui sit amet magna. Proin rhoncus varius viverra. Integer in justo eget eros lacinia consequat in ac sapien. Duis malesuada, orci ac facilisis elementum, lacus elit ullamcorper magna, ac consequat mi dolor at magna. Morbi scelerisque erat id purus varius, sed vestibulum ipsum interdum. Aliquam nec lorem in ex varius elementum. Suspendisse consequat efficitur velit, eu tristique enim lacinia quis. Maecenas rhoncus nisi nec felis eleifend, vel faucibus arcu fermentum. Donec in risus ut quam tempus volutpat non a turpis. Morbi sit amet tincidunt tortor. Vivamus gravida justo non mi malesuada dapibus. Ut vitae justo tellus. Nulla facilisi. Fusce finibus, purus eget facilisis tempus, nulla eros fermentum quam, ut sodales purus ante vel est. Donec euismod elementum orci, ac fermentum neque vestibulum non. Vivamus blandit, sem in pellentesque ultrices, lectus lectus fermentum ipsum, vel euismod neque orci nec sem. Proin a magna sit amet neque sodales auctor. Mauris eget nulla in nulla laoreet tincidunt. Nam non orci ut libero egestas faucibus. Sed vestibulum justo nec urna vestibulum laoreet. Maecenas commodo consequat lacus, nec sollicitudin purus lacinia quis. Nullam at tellus lacinia, convallis nisi ac, suscipit ligula. Morbi quis erat eget tellus facilisis faucibus. Duis auctor tempus leo. Ut convallis ligula libero, non sodales mi efficitur in. Duis nec sollicitudin eros. Nulla non lobortis tortor, vel placerat velit. Nulla nec orci sed dolor dapibus auctor. Vivamus sollicitudin lorem arcu, in dictum velit viverra nec. Nam eget odio in lectus tristique eleifend ut ut tortor. Sed at eros lacus. Nulla facilisi. Morbi convallis metus ut augue volutpat, et lacinia mi laoreet. Integer ullamcorper, nunc eget malesuada pharetra, sapien est malesuada risus, eget efficitur sem metus ut nunc. Pellentesque eget urna a lorem dictum dictum ac nec sem. Curabitur sed tristique odio, quis viverra arcu. Phasellus non quam non lorem facilisis suscipit. Vivamus vestibulum dui nec felis luctus, sit amet scelerisque neque placerat. Nam et turpis et mi bibendum tincidunt. Maecenas suscipit ultricies metus. Proin sed odio eros. Maecenas varius felis nec nisi lobortis, eget bibendum risus facilisis. Suspendisse fermentum fermentum risus, non vestibulum purus tempor nec. Integer nec justo vel lacus laoreet ullamcorper. In ultricies dui ut volutpat vestibulum. Mauris tincidunt fel\",\r\n  \"idEdicao\": 20,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova sem definir questões",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro: prova criada sem questões\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"versaoProva: must be less than or equal to 3\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 15,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 20,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    \r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova com 9 questões",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro: prova criada com 9 questões\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Devem ser inseridas 10 questões!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 29,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova com 11 questões",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro: prova criada com 11 questões\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Devem ser inseridas 10 questões!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 29,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    20,\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova sem definir titulo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro: prova criada sem titulo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"tituloProva: size must be between 1 and 100\",\r",
											"        \"tituloProva: must not be blank\"\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"idEdicao\": 22,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar Prova sem definir enunciado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro: prova criada sem enunciado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"enunciadoProva: must not be blank\",\r",
											"        \"enunciadoProva: size must be between 1 and 4000\"\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"dataInicio\": \"2024-03-20T09:12:27Z\",\r\n  \"dataFinal\": \"2024-03-20T09:12:27Z\",\r\n  \"versaoProva\": 1,\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"\",\r\n  \"idEdicao\": 20,\r\n  \"idsLinguagens\": [24],\r\n  \"idQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/criar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"criar-prova"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Listar prova pelo ID com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/avaliacao/xxx",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"xxx"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova com todos os filtros com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/avaliacao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova digitando a palavra chave com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/listar-provas-palavra-chave?palavraChave=teste",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"listar-provas-palavra-chave"
									],
									"query": [
										{
											"key": "palavraChave",
											"value": "teste"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova digitando a palavra chave inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/listar-provas-palavra-chave?palavraChave=1123366daa",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"listar-provas-palavra-chave"
									],
									"query": [
										{
											"key": "palavraChave",
											"value": "1123366daa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova com filtro versão da Prova com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/listar-prova-versao?versao=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"listar-prova-versao"
									],
									"query": [
										{
											"key": "versao",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova com filtro ID inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/listar-prova-versao?versao=12",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"listar-prova-versao"
									],
									"query": [
										{
											"key": "versao",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova com filtro edição do Vem Ser DBC com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/listar-provas-edicao?idEdicao=13",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"listar-provas-edicao"
									],
									"query": [
										{
											"key": "idEdicao",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar Prova com filtro data de criação com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Verificar código de status', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/listar-provas-periodo-datas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"listar-provas-periodo-datas"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Atualizar questões da prova, com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar questoes da prova\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Editado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Prova deixando menos 10 questões",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo com menos de 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\r",
											"        \"Devem ser inseridas 10 questões!\"\r",
											"    );\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Prova incluindo mais de 10 questões",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo com mais de 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\r",
											"        \"Devem ser inseridas 10 questões!\"\r",
											"    );\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30,\r\n    31\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Prova sem incluir questoes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo com mais de 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\r",
											"        \"Devem ser inseridas 10 questões!\"\r",
											"    );\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar duração prova, com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar duração da prova\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Editado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova 15\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar duração prova, incorreta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar duração da prova incorreta\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Data inicio não pode vir depois de data final!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem15\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:09:12Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar duração prova já iniciada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar duração da prova, já iniciada\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Essa prova não pode mais ser editada!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem13\",\r\n  \"dataInicio\": \"2024-03-20T09:11:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "307"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar titulo da Prova com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo da prova\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Editado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem13\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Prova com título em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo em branco\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"tituloProva: size must be between 1 and 100\",\r",
											"        \"tituloProva: must not be blank\"\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem13\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Prova titulo excedendo limite de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo com mais de 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"tituloProva: size must be between 1 and 100\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15 - Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BCContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, It has roots in a piece of classical Latin literature from 45 BCContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC.\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem13\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar Prova enunciado excedendo limite de caracteres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar titulo com mais de 100 caracteres\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"enunciadoProva: size must be between 1 and 4000\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis quis tortor in eros dapibus aliquet. Integer nec quam vitae lectus congue convallis. Phasellus nec venenatis neque, eget ullamcorper ante. Nulla facilisi. Sed id tincidunt odio. In porttitor eros nec odio finibus, at dignissim nisi efficitur. Curabitur non urna sit amet tortor venenatis dictum. Nam vel ullamcorper lacus. Nullam ultrices convallis mi, eu dictum velit interdum vitae. Pellentesque lacinia nisl libero, sit amet vestibulum urna accumsan in. Integer ut magna vel eros eleifend vestibulum. Proin consectetur lectus id quam bibendum fermentum. Mauris posuere semper bibendum. Sed convallis urna quis congue ultricies. Nullam viverra dui nec est tempor, sit amet sodales leo bibendum. Nulla sollicitudin tellus in urna mattis auctor. Curabitur sed augue sed nisl bibendum viverra a id libero. Phasellus mollis elit non purus efficitur, sit amet blandit ligula consequat. Donec egestas orci justo, ut consequat velit dignissim nec. In hac habitasse platea dictumst. Nulla non libero condimentum, sodales lectus eget, egestas dui. Vivamus rhoncus metus et quam vehicula luctus. Ut ultrices tortor vel neque ultricies, eget dapibus eros viverra. Donec id ligula et metus fermentum ultricies. Maecenas condimentum, turpis sit amet finibus hendrerit, libero velit pharetra libero, nec bibendum nisi nisl at ex. Cras accumsan bibendum sapien, vel ultrices eros elementum eu. Fusce euismod varius volutpat. Vestibulum commodo ipsum nisi, vel bibendum ipsum luctus eu. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Donec id arcu sed est laoreet ultrices a ac neque. Maecenas vel neque odio. Nam quis massa eget nisi gravida finibus non quis odio. Aliquam gravida elit at sapien vestibulum bibendum. Pellentesque id mi sapien. Proin sodales, orci nec aliquet pellentesque, augue nibh scelerisque libero, a efficitur nulla nisi id justo. Ut vitae leo ex. In luctus lorem ut nisl fermentum, non vehicula urna viverra. Vestibulum sollicitudin eros ac eros tristique tincidunt. Phasellus eget metus vel nunc condimentum viverra. Morbi tempor, orci non sodales fermentum, purus nulla fermentum libero, nec consequat turpis nulla quis est. Phasellus at ullamcorper tortor. Ut auctor consequat nisi, ac ullamcorper lorem euismod vel. Aliquam vestibulum suscipit nunc, nec malesuada lorem laoreet nec. Nulla facilisi. Integer ut sapien velit. Integer eleifend eget neque eget vestibulum. Nulla at odio ullamcorper, eleifend mi nec, volutpat mauris. Integer commodo turpis sit amet lacus eleifend, nec fermentum lorem viverra. Pellentesque blandit hendrerit purus, at vehicula ex consequat quis. Vivamus in diam in ex interdum tincidunt. Morbi vitae nunc nec purus maximus viverra id eget nisl. Integer euismod purus ac ante vestibulum convallis. Nulla non nisi nec lectus euismod pharetra nec sit amet nulla. Donec suscipit, orci non rhoncus aliquet, tortor erat interdum eros, in efficitur mi libero ut velit. Donec vestibulum urna vel est malesuada, eu accumsan mauris vulputate. Nam non eleifend mauris. Mauris vel mauris in lorem posuere tincidunt a vel elit. Nam ut libero auctor, mollis eros sed, finibus orci. Nullam malesuada, sapien sed molestie fermentum, lacus nulla feugiat ante, ac ultrices risus dui sit amet magna. Proin rhoncus varius viverra. Integer in justo eget eros lacinia consequat in ac sapien. Duis malesuada, orci ac facilisis elementum, lacus elit ullamcorper magna, ac consequat mi dolor at magna. Morbi scelerisque erat id purus varius, sed vestibulum ipsum interdum. Aliquam nec lorem in ex varius elementum. Suspendisse consequat efficitur velit, eu tristique enim lacinia quis. Maecenas rhoncus nisi nec felis eleifend, vel faucibus arcu fermentum. Donec in risus ut quam tempus volutpat non a turpis. Morbi sit amet tincidunt tortor. Vivamus gravida justo non mi malesuada dapibus. Ut vitae justo tellus. Nulla facilisi. Fusce finibus, purus eget facilisis tempus, nulla eros fermentum quam, ut sodales purus ante vel est. Donec euismod elementum orci, ac fermentum neque vestibulum non. Vivamus blandit, sem in pellentesque ultrices, lectus lectus fermentum ipsum, vel euismod neque orci nec sem. Proin a magna sit amet neque sodales auctor. Mauris eget nulla in nulla laoreet tincidunt. Nam non orci ut libero egestas faucibus. Sed vestibulum justo nec urna vestibulum laoreet. Maecenas commodo consequat lacus, nec sollicitudin purus lacinia quis. Nullam at tellus lacinia, convallis nisi ac, suscipit ligula. Morbi quis erat eget tellus facilisis faucibus. Duis auctor tempus leo. Ut convallis ligula libero, non sodales mi efficitur in. Duis nec sollicitudin eros. Nulla non lobortis tortor, vel placerat velit. Nulla nec orci sed dolor dapibus auctor. Vivamus sollicitudin lorem arcu, in dictum velit viverra nec. Nam eget odio in lectus tristique eleifend ut ut tortor. Sed at eros lacus. Nulla facilisi. Morbi convallis metus ut augue volutpat, et lacinia mi laoreet. Integer ullamcorper, nunc eget malesuada pharetra, sapien est malesuada risus, eget efficitur sem metus ut nunc. Pellentesque eget urna a lorem dictum dictum ac nec sem. Curabitur sed tristique odio, quis viverra arcu. Phasellus non quam non lorem facilisis suscipit. Vivamus vestibulum dui nec felis luctus, sit amet scelerisque neque placerat. Nam et turpis et mi bibendum tincidunt. Maecenas suscipit ultricies metus. Proin sed odio eros. Maecenas varius felis nec nisi lobortis, eget bibendum risus facilisis. Suspendisse fermentum fermentum risus, non vestibulum purus tempor nec. Integer nec justo vel lacus laoreet ullamcorper. In ultricies dui ut volutpat vestibulum. Mauris tincidunt fel\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar enunciado Prova com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar enunciado da prova\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Editado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"Prova técnica do Vem11\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar enunciado Prova em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Atualizar enunciado em branco\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"        \"enunciadoProva: size must be between 1 and 4000\",\r",
											"        \"enunciadoProva: must not be blank\"\r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tituloProva\": \"Prova Vem Ser15\",\r\n  \"enunciadoProva\": \"\",\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\",\r\n  \"idsQuestoes\": [\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/prova/editar-prova/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"editar-prova",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "520"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Deletar Prova não realizada com Sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova deletada com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Deletado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/delete-logico/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"delete-logico",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar Prova, usuario sem permissao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova deletada com sucesso\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_aluno}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/delete-logico/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"delete-logico",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "460"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar Prova já excluída",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Prova não deletada\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Prova já foi excluida\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/prova/delete-logico/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"prova",
										"delete-logico",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "464"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Canditado - Realizar prova",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Criar candidato prova com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova realizado com sucesso!\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.mensagem).to.eql(\"Cadastro realizado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 2396,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, data inicio incorreta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova, data inicio invalida\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"dataInicio: O campo dataInicio deve conter uma data futura.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2023-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, data inicio em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova, data inicio nao pode ser nulo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"dataInicio: must not be null\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, data final incorreta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova, data final invalida\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"dataFim: O campo dataFinal deve conter uma data futura.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2023-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, data final em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova, data final invalida\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"dataFim: must not be null\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, data inicio e data final incorreta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova, data inicio e data final invalidas\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"dataFim: O campo dataFinal deve conter uma data futura.\",\r",
											"        \"dataInicio: O campo dataInicio deve conter uma data futura.\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2023-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2023-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, data inicio e data final em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Cadastro candidato prova, data inicio e data final não podem ser nulo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"dataFim: must not be null\",\r",
											"        \"dataInicio: must not be null\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"\",\r\n  \"dataFim\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar canditado prova, candidato não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Candidato não encontrado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Candidato não encontrado!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 197,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, ID candidato em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"ID candidato não pode ser nulo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"idCandidato: must not be null\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": null,\r\n  \"idProva\": 514,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Candidato não encontrado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Candidato não encontrado!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1,\r\n  \"idProva\": 1,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova, ID prova em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"ID prova não pode ser nulo\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\"idProva: must not be null\"]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": null,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar candidato prova sem permissão de acesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Candidato sem permissão\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidato\": 1973,\r\n  \"idProva\": 518,\r\n  \"dataInicio\": \"2024-03-20T09:12:28Z\",\r\n  \"dataFim\": \"2024-03-20T09:12:28Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/criar-candidato-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"criar-candidato-prova"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Iniciar prova, candidato não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Inicar prova, candidato não encontrado.\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Nenhum candidato encontrado\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidatoProva\": 1976\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/iniciar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"iniciar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Finalizar prova, candidato não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Finalizar prova, candidato não encontrado\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Nenhum candidato encontrado\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidatoProva\": 1976\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/finalizar-prova",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"finalizar-prova"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar resposta candidato, com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidatoProva\": 43,\r\n  \"idQuestao\": 1,\r\n  \"idAlternativaObjetiva\": 1,\r\n  \"codigo\": \"var = x + 2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/atualizarRespostaCandidato",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"atualizarRespostaCandidato"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar resposta candidato não encontrado, sem sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idCandidatoProva\": 113,\r\n  \"idQuestao\": 1,\r\n  \"idAlternativaObjetiva\": 2,\r\n  \"codigo\": \"var = x + 2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/candidato-prova/atualizarRespostaCandidato",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"atualizarRespostaCandidato"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Visualizar prova canditado - Instrutor, com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/candidato-prova/visualizar-prova-instrutor?idProva=520",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"visualizar-prova-instrutor"
									],
									"query": [
										{
											"key": "idProva",
											"value": "520"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Visualizar prova canditado - Instrutor, id não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/candidato-prova/visualizar-prova-instrutor?idProva=999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"visualizar-prova-instrutor"
									],
									"query": [
										{
											"key": "idProva",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Visualizar prova canditado - Canditado, com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/candidato-prova/visualizar-prova-candidato/?idProva=513",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"visualizar-prova-candidato",
										""
									],
									"query": [
										{
											"key": "idProva",
											"value": "513"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Visualizar prova canditado - Canditado, id não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test('Verificar código de status 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/candidato-prova/visualizar-prova-candidato/?idProva=999",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"candidato-prova",
										"visualizar-prova-candidato",
										""
									],
									"query": [
										{
											"key": "idProva",
											"value": "999"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Usuario",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "Listar gestores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario"
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar gestores por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/id-gestor?idGestor=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"id-gestor"
									],
									"query": [
										{
											"key": "idGestor",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar gestor por id, nao cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"     pm.expect(pm.response.json()).to.be.an('object');\r",
											"     pm.expect(pm.response.json().message).to.contains([\r",
											"        'Usuario não encontrado!'\r",
											"     ]);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/id-gestor?idGestor=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"id-gestor"
									],
									"query": [
										{
											"key": "idGestor",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar gestor por id invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/id-gestor?idGestor=\"2\"",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"id-gestor"
									],
									"query": [
										{
											"key": "idGestor",
											"value": "\"2\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar gestor por nome, email e cargo",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/usuario/gestor-by-nome-email?nome=ADMIN&email=joao.kriger@dbccompany.com.br&cargo[idCargo]=2&cargo[nome]=ROLE_GESTAO_DE_PESSOAS",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"gestor-by-nome-email"
									],
									"query": [
										{
											"key": "nome",
											"value": "ADMIN"
										},
										{
											"key": "email",
											"value": "joao.kriger@dbccompany.com.br"
										},
										{
											"key": "cargo[idCargo]",
											"value": "2"
										},
										{
											"key": "cargo[nome]",
											"value": "ROLE_GESTAO_DE_PESSOAS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar gestores inativos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/contas-inativas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"contas-inativas"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Inserir imagem para o  cadastro de usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Marqu/OneDrive/Imagens/surf 2.jpg"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/usuario/upload-imagem/{email}?email=thales.brasileiro",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"upload-imagem",
										"{email}"
									],
									"query": [
										{
											"key": "email",
											"value": "thales.brasileiro"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Inserir imagem para usuario nao cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"     pm.expect(pm.response.json()).to.be.an('object');\r",
											"     pm.expect(pm.response.json().message).to.contains([\r",
											"        \"Email não encontrado\"\r",
											"     ]);\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Marqu/OneDrive/Imagens/Capturas de tela/Captura de tela 2024-09-17 144813.png"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/usuario/upload-imagem/{email}?email=thales",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"upload-imagem",
										"{email}"
									],
									"query": [
										{
											"key": "email",
											"value": "thales"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Desativar conta de usuario",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/desativacao-conta/3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"desativacao-conta",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Desativar conta de usuario inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Usuario não encontrado!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/desativacao-conta/0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"desativacao-conta",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Deletar gestor nao encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Usuario não encontrado!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/usuario/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"usuario",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Formulario",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "Pegar print de usuario sem print cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Usuário não possui print das configurações do pc cadastrado.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-print-config-pc?idFormulario=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-print-config-pc"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pegar print de usuario nao cadastrado no sistema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Erro ao buscar o formulário.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-print-config-pc?idFormulario=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-print-config-pc"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Pegar print de usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-print-config-pc?idFormulario=3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-print-config-pc"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recuperar curriculo usuario sem curriculo cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Usuário não possui currículo cadastrado.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-curriculo?idFormulario=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-curriculo"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recuperar curriculo usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-curriculo?idFormulario=55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-curriculo"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recuperar curriculo usuario nao cadastrado no sistema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Erro ao buscar o formulário.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-curriculo?idFormulario=55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-curriculo"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recuperar doc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Usuário não possui documentos.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-comp-matricula?idFormulario=55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-comp-matricula"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "55"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recuperar doc usuario nao cadastrado no sistema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Erro ao buscar o formulário.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-comp-matricula?idFormulario=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-comp-matricula"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Recuperar doc de usuario sem doc cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Usuário não possui documentos.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/recuperar-comp-matricula?idFormulario=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"recuperar-comp-matricula"
									],
									"query": [
										{
											"key": "idFormulario",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar todos formularios com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/listar?pagina=0&tamanho=10&sort=idFormulario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"listar"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "idFormulario"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar todos formularios com \"pagina\" < 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Page ou Size não pode ser menor que zero.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/listar?pagina=-1&tamanho=10&sort=idFormulario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"listar"
									],
									"query": [
										{
											"key": "pagina",
											"value": "-1"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "idFormulario"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar todos formularios com \"tamanho\" < 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Page ou Size não pode ser menor que zero.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/listar?pagina=0&tamanho=-1&sort=idFormulario",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"listar"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "-1"
										},
										{
											"key": "sort",
											"value": "idFormulario"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Listar todos formularios com \"sort\" invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/formulario/listar?pagina=0&tamanho=10&sort=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"listar"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Cadastrar formulario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"SI\",\r\n  \"turno\": \"NOITE\",\r\n  \"instituicao\": \"UNESC\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Intermediario\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": false,\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": 8,\r\n  \"semestreAtual\": 4,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"AMD Ryzen 5-5600G, 16Gb, 500gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/cadastro",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"cadastro"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar formulario com qtd de semestres negativos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"SI\",\r\n  \"turno\": \"NOITE\",\r\n  \"instituicao\": \"ESUCRI\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Intermediario\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": false,\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": -1,\r\n  \"semestreAtual\": 10,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"AMD Ryzen 5-5600G, 16Gb, 500gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/cadastro",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"cadastro"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar formulario com o semestre atual maior que a quantidade de semestre",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"SI\",\r\n  \"turno\": \"NOITE\",\r\n  \"instituicao\": \"ESUCRI\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Intermediario\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": false,\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": 10,\r\n  \"semestreAtual\": 12,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"AMD Ryzen 5-5600G, 16Gb, 500gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/cadastro",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"cadastro"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar formulario com o semestre atual negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"SI\",\r\n  \"turno\": \"NOITE\",\r\n  \"instituicao\": \"ESUCRI\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Intermediario\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": false,\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": 10,\r\n  \"semestreAtual\": -2,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"AMD Ryzen 5-5600G, 16Gb, 500gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/cadastro",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"cadastro"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar formulario com o turno \"TARDE\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"SI\",\r\n  \"turno\": \"TARDE\",\r\n  \"instituicao\": \"ESUCRI\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Intermediario\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": false,\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": 10,\r\n  \"semestreAtual\": -2,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"AMD Ryzen 5-5600G, 16Gb, 500gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/cadastro",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"cadastro"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Atualizar config pc id valido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Marqu/OneDrive/Imagens/Capturas de tela/Captura de tela 2024-09-15 211201.png"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/formulario/upload-print-config-pc/55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"upload-print-config-pc",
										"55"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar curriculo por id valido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Marqu/Downloads/Documento sem título.pdf"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/formulario/upload-curriculo/55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"upload-curriculo",
										"55"
									]
								}
							},
							"response": [
								{
									"name": "Atualizar curriculo por id valido",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token_user_instrutor}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/Marqu/Downloads/Documento sem título.pdf"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/formulario/upload-curriculo/55",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"formulario",
												"upload-curriculo",
												"55"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 18 Sep 2024 18:20:31 GMT"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "CF-Ray",
											"value": "8c5359a0e8126b21-GRU"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "Vary",
											"value": "Origin, Access-Control-Request-Method, Access-Control-Request-Headers, Accept-Encoding"
										},
										{
											"key": "pragma",
											"value": "no-cache"
										},
										{
											"key": "rndr-id",
											"value": "959db231-f1fd-4b10"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-render-origin-server",
											"value": "Render"
										},
										{
											"key": "x-xss-protection",
											"value": "1; mode=block"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=86400"
										}
									],
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Atualizar curriculo por id valido Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Marqu/OneDrive/Documentos/Documento1 química Lavagem a Seco.pdf"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/formulario/upload-comp-matricula/55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"upload-comp-matricula",
										"55"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar formulario com id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"Erro ao buscar o formulário.\")\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"Analise e Desenvolvimento de Software\",\r\n  \"turno\": \"NOITE\",\r\n  \"instituicao\": \"PUC\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Não possuo\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": \"TDAH\",\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": 4,\r\n  \"semestreAtual\": 2,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"Intel i7-4790K, 16Gb, 240Gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/atualizar-formulario/-10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"atualizar-formulario",
										"-10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Atualizar formulario com sucesso Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"matriculadoBoolean\": true,\r\n  \"curso\": \"Analise e Desenvolvimento de Software\",\r\n  \"turno\": \"NOITE\",\r\n  \"instituicao\": \"PUC\",\r\n  \"github\": \"https://github.com/link-github\",\r\n  \"linkedin\": \"https://linkedin.com/\",\r\n  \"desafiosBoolean\": true,\r\n  \"problemaBoolean\": true,\r\n  \"reconhecimentoBoolean\": true,\r\n  \"altruismoBoolean\": true,\r\n  \"resposta\": \"Outro\",\r\n  \"lgpdBoolean\": true,\r\n  \"provaBoolean\": true,\r\n  \"ingles\": \"Não possuo\",\r\n  \"espanhol\": \"Não possuo\",\r\n  \"neurodiversidade\": \"TDAH\",\r\n  \"efetivacaoBoolean\": true,\r\n  \"disponibilidadeBoolean\": true,\r\n  \"genero\": \"Homem Cis\",\r\n  \"orientacao\": \"Heterosexual\",\r\n  \"trilhas\": [\r\n    \"QA\"\r\n  ],\r\n  \"importancia\": \"importancia\",\r\n  \"qtdSemestres\": 4,\r\n  \"semestreAtual\": 2,\r\n  \"tipoGraduacao\": \"2\",\r\n  \"descConfigPc\": \"Intel i7-4790K, 16Gb, 240Gb SSD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/atualizar-formulario/55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"atualizar-formulario",
										"55"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Deletar formulario com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/delete-fisico/101",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"delete-fisico",
										"101"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar formulario ja deletado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Erro ao buscar o formulário.\");\r",
											"}); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/formulario/delete-fisico/101",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"formulario",
										"delete-fisico",
										"101"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Trilha",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Criar nova trilha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"E\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/trilha",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar trilha vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Testar respota do server\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors).to.eql([\r",
											"         \"nome: O campo nome não deve ser vazio\"    \r",
											"    ]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/trilha",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar trilha com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"@#$%¨|&\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/trilha",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "todas-trilhas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/trilha/listar",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha",
										"listar"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Deletar trilha com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/trilha/deletar/28",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha",
										"deletar",
										"28"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar sem passar id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/trilha/deletar/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha",
										"deletar",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar com id negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const respData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/trilha/deletar/-1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha",
										"deletar",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar trilha ja excluida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/trilha/deletar/18",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"trilha",
										"deletar",
										"18"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Edicao",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listar-edicoes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/listar-todas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"listar-todas"
									]
								}
							},
							"response": []
						},
						{
							"name": "edicao-atual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/edicao-atual",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"edicao-atual"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Deletar edicao inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/delete-fisico/-10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"delete-fisico",
										"-10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletar edicao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/delete-fisico/241",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"delete-fisico",
										"241"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Criar edicao vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.test(jsonData.errors).to.eql(\"nome: O nome não pode ser nulo ou vazio\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idEdicao\": 0,\r\n  \"nome\": \"\",\r\n  \"notaCorte\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/edicao/criar-edicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"criar-edicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar edicao com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEdicao\" : 0,\r\n    \"nome\": \"VS25\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/edicao/criar-edicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"criar-edicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar edicao com caracteres especiais",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"idEdicao\" : 0,\r\n    \"nome\": \"@(&*$*@¨$(%@!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/edicao/criar-edicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"criar-edicao"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Editar nota de corte valor negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/update-nota-corte?nota=-100",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"update-nota-corte"
									],
									"query": [
										{
											"key": "nota",
											"value": "-100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nota de corte valor acima de 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/update-nota-corte?nota=10000000000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"update-nota-corte"
									],
									"query": [
										{
											"key": "nota",
											"value": "10000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar nota de corte com valor entre 0 a 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/edicao/update-nota-corte?nota=55",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"edicao",
										"update-nota-corte"
									],
									"query": [
										{
											"key": "nota",
											"value": "55"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Relatorios",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "Buscar qtd de pessoas pcd inscritas",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/relatorios/quantidade-de-pessoas-inscritas-por-pcd",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"relatorios",
										"quantidade-de-pessoas-inscritas-por-pcd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar qtd de pessoas com neurodiversidade inscritas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/relatorios/quantidade-de-pessoas-inscritas-por-neurodiversidade",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"relatorios",
										"quantidade-de-pessoas-inscritas-por-neurodiversidade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar qtd de pessoas inscritas por genero",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/relatorios/quantidade-de-pessoas-inscritas-por-genero",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"relatorios",
										"quantidade-de-pessoas-inscritas-por-genero"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar qtd de pessoas inscritas por estado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/relatorios/quantidade-de-pessoas-inscritas-por-estado",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"relatorios",
										"quantidade-de-pessoas-inscritas-por-estado"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar qtd de pessoas inscritas por edicao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/relatorios/quantidade-de-pessoas-inscritas-por-edicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"relatorios",
										"quantidade-de-pessoas-inscritas-por-edicao"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Entrevista",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listar todas entrevistas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/entrevista",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"entrevista"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar entrevista por trilha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/entrevista/por-trilha?trilha=QA",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"entrevista",
										"por-trilha"
									],
									"query": [
										{
											"key": "trilha",
											"value": "QA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar entrevista por trilha inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/entrevista/por-trilha?trilha=SCRUM",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"entrevista",
										"por-trilha"
									],
									"query": [
										{
											"key": "trilha",
											"value": "SCRUM"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar entrevistas por mes e ano",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/entrevista/listar-por-mes?pagina=0&tamanho=20&mes=10&ano=2023",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"entrevista",
										"listar-por-mes"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "20"
										},
										{
											"key": "mes",
											"value": "10"
										},
										{
											"key": "ano",
											"value": "2023"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "exportar lista de entrevistados xls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/entrevista/export-xlsx",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"entrevista",
										"export-xlsx"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar entrevista por email do candidato",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/entrevista/buscar-entrevista-email-candidato/email@mail.com",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"entrevista",
										"buscar-entrevista-email-candidato",
										"email@mail.com"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": []
				},
				{
					"name": "PUT",
					"item": []
				},
				{
					"name": "DELETE",
					"item": []
				}
			]
		},
		{
			"name": "Avaliacao",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listar todas avaliacoes de aprovados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/avaliacao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar todas avaliacoes com filtros ou retornar lista de avaliacoes aprovados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/avaliacao/filtro-avaliacao?pagina=1&tamanho=10&email=&edicao=VEMSER01&trilha=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"filtro-avaliacao"
									],
									"query": [
										{
											"key": "pagina",
											"value": "1"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "email",
											"value": ""
										},
										{
											"key": "edicao",
											"value": "VEMSER01"
										},
										{
											"key": "trilha",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "adicionar uma avaliacao a um candidato",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aprovadoBoolean\": true,\r\n  \"idInscricao\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/avaliacao?token={{token_user_gestor}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token_user_gestor}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "adicionar uma avaliacao a uma inscricao inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem server\", function () {\r",
											"    var jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"ID_Inscrição inválido\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aprovadoBoolean\": true,\r\n  \"idInscricao\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/avaliacao?token={{token_user_gestor}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token_user_gestor}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "editar uma avliacao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aprovadoBoolean\": true,\r\n  \"idInscricao\": {{idInscricao}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/avaliacao/update/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"update",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "editar uma avliacao inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"Avaliação não encontrada!\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aprovadoBoolean\": true,\r\n  \"idInscricao\": {{idInscricao}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/avaliacao/update/{{avaliacaoInex}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"update",
										"{{avaliacaoInex}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "editar uma avaliacao para inscricao inex",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"Inscrição não encontrada!\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aprovadoBoolean\": true,\r\n  \"idInscricao\": -10000000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/avaliacao/update/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"update",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "deletar uma avaliacao por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem de erro\", function () {\r",
											"     let jsonData = pm.response.json()\r",
											"     pm.expect(jsonData.message).to.eql(\"Avaliação não encontrada!\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/avaliacao/-10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"-10"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar uma avaliacao por id valido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/avaliacao/2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"avaliacao",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Inscricao",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listar todas isncricoes ordenadas por idInscricao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/inscricao?sort=idInscricao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao"
									],
									"query": [
										{
											"key": "sort",
											"value": "idInscricao"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricao por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/inscricao/find-by-idInscricao?id=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"find-by-idInscricao"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricao por id invalido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"validar mensagem e header\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"     pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"     pm.expect(jsonData.message).to.equal(\"ID_Inscrição inválido\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/inscricao/find-by-idInscricao?id=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"find-by-idInscricao"
									],
									"query": [
										{
											"key": "id",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Criar uma inscricao com o id do candidato e id formulario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/inscricao/cadastro?idCandidato=2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"cadastro"
									],
									"query": [
										{
											"key": "idCandidato",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": []
				}
			]
		},
		{
			"name": "Pre-prova",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "criar pre prova",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nomePreProva\": \"Dinâmica solo\",\r\n  \"sequencia\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas/create",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "criar pre prova com nome vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nomePreProva\": \"\",\r\n  \"sequencia\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas/create",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "criar pre prova com sequencia negativa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem de erro\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.errors).to.eql([ 'sequencia: must be greater than 0' ] )\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nomePreProva\": \"fawiuhfiaf\",\r\n  \"sequencia\": -1000000000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas/create",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "edicao de pre prova",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idPreProva\": 1,\r\n  \"idCandidato\": {{idCandidato}},\r\n  \"notaPreProva\": 10,\r\n  \"observacao\": \"Candidato muito bom\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas"
									]
								}
							},
							"response": []
						},
						{
							"name": "editar nome pre prova e sequencia por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_instrutor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nomePreProva\": \"Dinamica Jamaica\",\r\n  \"sequencia\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "listar pre provas edicao atual",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/preprovas/preprovas-edicao-atual",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"preprovas-edicao-atual"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar pre provas edicao por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/preprovas/preprovas-edicao/1034",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"preprovas-edicao",
										"1034"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "deletar pre prova inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas/200",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"200"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar pre prova com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/preprovas/3",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"preprovas",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Inscricao",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listar todas inscricoes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricao por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/find-by-idInscricao?id=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"find-by-idInscricao"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricao por id invalida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"ID_Inscrição inválido\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/find-by-idInscricao?id=-1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"find-by-idInscricao"
									],
									"query": [
										{
											"key": "id",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricao por id inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"ID_Inscrição inválido\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/find-by-idInscricao?id=20000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"find-by-idInscricao"
									],
									"query": [
										{
											"key": "id",
											"value": "20000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricoes por filtro de pagina e tamanho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/filtro-inscricao?pagina=0&tamanho=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"filtro-inscricao"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricoes por filtro de email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/filtro-inscricao?pagina=0&tamanho=10&email=valentina.bittencourt%40gmail.com",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"filtro-inscricao"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "email",
											"value": "valentina.bittencourt%40gmail.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricoes por filtro de edicao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/filtro-inscricao?pagina=0&tamanho=10&edicao=VEMSER_28913",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"filtro-inscricao"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "edicao",
											"value": "VEMSER_28913"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "listar inscricoes por filtro de trilha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/filtro-inscricao?pagina=0&tamanho=10&trilha=QA",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"filtro-inscricao"
									],
									"query": [
										{
											"key": "pagina",
											"value": "0"
										},
										{
											"key": "tamanho",
											"value": "10"
										},
										{
											"key": "trilha",
											"value": "QA"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Criar umas inscricao para um candidato",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/cadastro?idCandidato=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"cadastro"
									],
									"query": [
										{
											"key": "idCandidato",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar umas inscricao para um candidato inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"Candidato não encontrado.\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/cadastro?idCandidato=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"cadastro"
									],
									"query": [
										{
											"key": "idCandidato",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Criar umas inscricao para um candidato com inscricao ativa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"Inscrição já realizada\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/cadastro?idCandidato=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"cadastro"
									],
									"query": [
										{
											"key": "idCandidato",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "deletar inscricao com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/201",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"201"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar inscricao ja deletada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar mensagem\", function () {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.message).to.eql(\"ID_Inscrição inválido\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/inscricao/200",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"inscricao",
										"200"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Etapas",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "listar todas etapas",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/etapas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"etapas"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar etapas ultima edicao",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/etapas/ultima-edicao",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"etapas",
										"ultima-edicao"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar etapas ativas",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/etapas/ativas",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"etapas",
										"ativas"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "criar etapa valida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"etapas\": \"INSCRICAO\",\r\n  \"dataInicio\": \"2024-09-25\",\r\n  \"dataFim\": \"2024-09-25\",\r\n  \"ativo\": true,\r\n  \"edicao\": {\r\n    \"idEdicao\": 0,\r\n    \"nome\": \"string\",\r\n    \"notaCorte\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/etapas/create",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"etapas",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "deletar etapa valida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/etapas/22",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"etapas",
										"22"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar etapa ja deletada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token_user_gestor}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/etapas/22",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"etapas",
										"22"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "acessesToken",
			"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluLnRlc3RlIiwianRpIjoiMyIsImNhcmdvcyI6WyJST0xFX0FETUlOIl0sImlhdCI6MTcwOTIzOTU2NCwiZXhwIjoxNzExODMxNTY0fQ.pIVk44Q__HQf0TiVvkxLIuaOASA9YYX1wfTsu3TmQV8"
		}
	]
}